# Who am I?

* Developer for Lab305
* Ultrarunner
* Bearded guy

# What is Salt

it's a super cool program

# Installing Salt

https://salt.readthedocs.org/en/latest/topics/installation/index.html

```
$ echo deb http://ppa.launchpad.net/saltstack/salt/ubuntu `lsb_release -sc` main | sudo tee /etc/apt/sources.list.d/saltstack.list
$ wget -q -O- "http://keyserver.ubuntu.com:11371/pks/lookup?op=get&search=0x4759FA960E27C0A6" | sudo apt-key add -

$ sudo apt-get update
$ sudo apt-get install salt
$ sudo apt-get install salt-master salt-minion
```

# Configuring Salt

First lets configure our salt master.

Edit ``/etc/salt/master`` and find the ``fileserver_backend`` setting. This setting is how we configure salt to use either the local file system (``roots``) or git as the file server back end. You can mix and match if you please. In fact I prefer to first use both.

```
fileserver_backend:
  - roots
  - git
```

What this is saying is that I'm going to be using the local file system as well as git as the file server backends. And it will first look in the local file system before looking at git.

Next lets find the ``file_roots`` setting. The file roots setting is where we tell Salt to look for state files on the local file system. In my example we are setting it to

```
file_roots:
  base:
    - /srv/salt/django-cms-demo/salt/states
```

Now lets look for the ``gitfs_remotes`` setting. Here we can specify as many git repositories as we like.

```
gitfs_remotes:
  - git://github.com/Lab305/base-states.git
```

So now lets recap. First we set the file server backend. Then we specified where each backend will look for files. The strategy I'm utilizing here will allow us to reuse a "base states" repo that I've created. This repo contains some basic stuff that gets used over and over again. Stuff like installing apache, postgres, creating a postgis template, etc. In the file_roots what I'm doing here is I have a django project named "django-cms-demo" in this project I have a directory called salt and in that directory I have another called states. This salt directory is important when we get into vagrant, but for now it's important that we check this repo out in the ``/srv/salt`` directory. We can configure the master to be a minion as well and manage this repo, to verify that when the repo gets updated this directory gets a fresh checkout.

Now lets restart the master: ``# service salt-master restart``

Next lets configure the minion. Edit the minion config file ``/etc/salt/minion`` to point to the salt master. In this example we are only using one machine so, the Master is also the minion.

Lets set the master to the ``hostname`` of our machine. **Note**: the master can be any fqdn or ip address or hostname.

```
master: precise64
```

And now restart the salt minion:

```
# service salt-minion restart
```

Now our minion and master are setup we need to have them exchange keys so they can talk to eachother.

To view the list of keys for a salt master run:

```
# salt-key -L
Accepted Keys:
Unaccepted Keys:
precise64
Rejected Keys:
```

Lets accept the key:

```
# salt-key -A
```

Now lets test the communication between the master and minion:

```
# salt '*' test.ping
precise64:
    True
```

# Salt States

In order to actually manage the state of a machine we need to push state to it. When we configured our Master previously we are using ``roots`` and ``git`` as our fileserver backends.

To install all our packages, lets run ``salt '*' state.highstate``. This could take a while depending on your internet connection.

Our states all depend on having a ``top.sls``. In our example the Top file is actually located in our projects repository, and references states that are located in base-states repository.

# Salt Modules

To execute commands that are run frequently, we can create some modules.

Modules are located in the ``_modules`` directory. This directory can be in any of our "fileserver_backend" locations. IE in either the root level of our base-states repository or in the ``salt/states`` dir of our projet repository.

I've got created some modules here to handle some repetitive tasks.

1. ``syncdb``
2. ``migrate``
3. ``collectstatic``
4. ``restart_apache``
5. ``restart_supervisord``
6. ``update_code``
7. ``backup_db``
8. ``quick_deploy``
9. ``full_deploy``

I hope these are all pretty self explanitory, except maybe quick and full deploy.

The quick is when there are no migrations, so we dont' migrate, and we don't backup the db.

the full, is when there are migrations to be run, we can backup the DB first, run migrations then continue the deploy process.


# Vagrant

1. Install Vagrant
2. Install Virtual Box
3. Install Salty-Vagrant
4. Get the Ubuntu 12.04 base box: vagrant box add precise64 http://files.vagrantup.com/precise64.box
5. Create/Update your Vagrantfile


Now if you're gonna use a the salt master to provision this vagrant vm, we should set our vagrant vm keys on the salt master.

``
root@saltmaster# salt-key --gen-keys=[minion_id]
root@saltmaster# cp [minion_id].pub /etc/salt/pki/master/minions/[minion_id]
``

**Note** ``[minion_id]`` in this instance could be something like ``vagrant-demo``

In the root of our project we should have a ``Vagrantfile`` and a ``salt`` directory.

```
mysite/
    Vagrantfile
    mysite/
        app1/
            models.py
            views.py
        settings.py
        wsgi.py
    salt/
        minion.conf
        key/
            minion.pem
            minion.pub
```
The keys we just created should be stored in the ``myvagrant/salt/key`` directory. This will allow our vagrant VM to auth against the salt master automatically.

Now let ssetup our our dev env:

``
source /usr/local/bin/virtualenvwrapper.sh
mkvirtualenv -a /home/vagrant -r /home/vagrant/mysite.com/src/mysite/requirements.txt mysite.com
``

now lets run our website

```
cd /home/vagrant/mysite.com/mysite
python manage.py runserver 0.0.0.0:8000 --settings=demo.prod
```

Note the ip address on this is important to access the runserver via the 2.3.4.10 address we have mapped on our Vagrantfile


